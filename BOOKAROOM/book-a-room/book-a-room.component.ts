import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { RoomService, Room } from '../../services/room.service';
import { BookingService, Booking } from '../../services/booking.service';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { BackButtonComponentComponent } from '../../shared/components/back-button-component/back-button-component.component';


@Component({
  selector: 'app-book-a-room',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, RouterModule, BackButtonComponentComponent],
  templateUrl: './book-a-room.component.html',
  styleUrl: './book-a-room.component.scss'
})
export class BookARoomComponent implements OnInit {
  bookingForm: FormGroup;
  room: Room | undefined;
  totalPrice: number = 0;
  errorMessage: string = '';
  bookingSuccess: boolean = false;
  bookingReference: string = '';

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private roomService: RoomService,
    private bookingService: BookingService,
    private router: Router
  ) {
    this.bookingForm = this.fb.group({
      name: ['', Validators.required],
      surname: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      contactNumber: ['', Validators.required],
      includeBreakfast: [false],
      promoCode: [''],
      checkIn: ['', Validators.required],
      checkOut: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    const roomId = +this.route.snapshot.paramMap.get('roomId')!;
    
    if (roomId) {
        this.roomService.getRoomById(roomId).subscribe(
            (room) => {
                this.room = room;
                this.bookingForm.patchValue({
                    checkIn: this.route.snapshot.queryParamMap.get('checkIn'),
                    checkOut: this.route.snapshot.queryParamMap.get('checkOut')
                });
            },
            (error) => {
                this.errorMessage = 'Error loading room details. Please try again.';
                console.error('Error fetching room details:', error);
            }
        );
    } else {
        console.log("Room ID is not present in the route.");
    }
}


  calculatePrice(): void {
    if (this.bookingForm.invalid || !this.room) {
      console.log("Form is invalid or room data is missing.");
      return;
    }

    const formValue = this.bookingForm.value;
    const checkIn = new Date(formValue.checkIn);
    const checkOut = new Date(formValue.checkOut);

    const payload = {
      room_ID: this.room.room_ID,  // Send only the Room_ID
      checkIn: checkIn,
      checkOut: checkOut,
      includeBreakfast: formValue.includeBreakfast,
      promoCode: formValue.promoCode
    };

    console.log("Payload being sent to calculatePrice:", payload);

    this.bookingService.calculatePrice(payload).subscribe(
      (response) => {
        this.totalPrice = response.totalPrice;
        console.log("Price calculated successfully:", this.totalPrice);
      },
      (error) => {
        this.errorMessage = 'Error calculating price. Please try again.';
        console.error("Error calculating price:", error);
      }
    );
  }

  submitBooking(): void {
    if (this.bookingForm.invalid || !this.room) {
      return;
    }

    const bookingModel: Booking = {
      room_ID: this.room.room_ID,
      name: this.bookingForm.value.name,
      surname: this.bookingForm.value.surname,
      email: this.bookingForm.value.email,
      contactNumber: this.bookingForm.value.contactNumber,
      checkIn: new Date(this.bookingForm.value.checkIn),
      checkOut: new Date(this.bookingForm.value.checkOut),
      includeBreakfast: this.bookingForm.value.includeBreakfast,
      promoCode: this.bookingForm.value.promoCode,
      totalPrice: this.totalPrice,
      bookingID: 0, // Assume this will be set by the backend
      bookingReference: '' // Will be generated by backend
    };

    // Navigate to the summary page with booking details
    this.router.navigate(['/booking-summary'], {
      queryParams: { booking: JSON.stringify(bookingModel) }
    });
  }
}