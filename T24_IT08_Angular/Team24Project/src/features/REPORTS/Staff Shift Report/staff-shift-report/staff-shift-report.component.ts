import html2canvas from 'html2canvas';
import { Component, OnInit } from '@angular/core';
import { StaffShiftService } from '../../../../services/staff-shift.service';
import { StaffService } from '../../../../services/staff.service';
import { ShiftTypeService } from '../../../../services/shift-type.service';
import { StaffShifts } from '../../../../services/staff-shift.service';
import { Staff } from '../../../../services/staff.service';
import { ShiftType } from '../../../../shared/models/shiftType.model';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { MaterialModule } from '../../../../shared/components/material.module';
import { Router } from '@angular/router';
import { environment } from '../../../../environments/environments';
import { CloseScrollStrategy } from '@angular/cdk/overlay';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

@Component({
  selector: 'app-staff-shift-report',
  standalone: true,
  imports: [CommonModule, MaterialModule, RouterModule, FormsModule, ReactiveFormsModule],
  templateUrl: './staff-shift-report.component.html',
  styleUrls: ['./staff-shift-report.component.scss']
})
export class StaffShiftReportComponent implements OnInit {
  shifts: StaffShifts[] = [];
  filteredShifts: StaffShifts[] = [];
  staffList: Staff[] = [];
  shiftTypes: ShiftType[] = [];
  selectedShift: StaffShifts | null = null;

  // Search fields
  searchStaff: string = '';
  searchShiftType: string = '';
  searchNotes: string = '';
  searchTime: string = '';

  constructor(
    private staffShiftsService: StaffShiftService,
    private staffService: StaffService,
    private shiftTypeService: ShiftTypeService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.loadShifts();
    this.loadStaff();
    this.loadShiftTypes();
  }

  loadShifts(): void {
    this.staffShiftsService.getStaffShifts().subscribe((data) => {
      console.log('Shifts data:', data); 
      this.shifts = data;
      this.applyFilter(); // Apply filter initially
    });
  }

  loadStaff(): void {
    this.staffService.getStaff().subscribe((data) => {
      this.staffList = data;
    });
  }

  loadShiftTypes(): void {
    this.shiftTypeService.getAllShiftTypes().subscribe((data) => {
      this.shiftTypes = data;
    });
  }

applyFilter(): void {
  this.filteredShifts = this.shifts.filter(shift => {
    console.log('Applying filter with search values:', this.searchStaff, this.searchShiftType, this.searchNotes, this.searchTime);
  console.log('Shifts before filtering:', this.shifts);

    const staffName = this.getStaffName(shift.staffId).toLowerCase();
    const shiftTypeName = this.getShiftTypeName(shift.shift_Type_Id).toLowerCase();
    const notes = shift.notes ? shift.notes.toLowerCase() : ''; 
    const time = `${shift.startTime} ${shift.endTime}`.toLowerCase();

    return staffName.includes(this.searchStaff.toLowerCase()) &&
           shiftTypeName.includes(this.searchShiftType.toLowerCase()) &&
           notes.includes(this.searchNotes.toLowerCase()) &&
           time.includes(this.searchTime.toLowerCase());
  });
  console.log('Shifts after filtering:', this.filteredShifts);
}


  goBack() {
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const role = currentUser.role;
    const emailaddress = currentUser.emailaddress;
  
    if (role === 'Admin') {
      this.router.navigate([`/admin-dashboard/${emailaddress}`]);
    } else if (role === 'Staff') {
      this.router.navigate([`/staff-dashboard/${emailaddress}`]);
    } else if (role === 'Guest') {
      this.router.navigate([`/guest-dashboard/${emailaddress}`]);
    } else {
      console.error('Unknown role:', role);
      this.router.navigate(['/']); // Default route or error page
    }
  }

  getStaffName(staffId: number): string {
    const staff = this.staffList.find(s => s.staffId === staffId);
    return staff ? staff.name : 'Unknown';
  }

  getShiftTypeName(shift_Type_Id: number): string {
    const shiftType = this.shiftTypes.find(st => st.shift_Type_Id === shift_Type_Id);
    return shiftType ? shiftType.type_Name : 'Unknown';
  }

  exportToPdf(): void {
    window.open(`${environment.apiUrl}Staff_Shift/export/pdf`, '_blank');
  }

  exportToExcel(): void {
    window.open(`${environment.apiUrl}Staff_Shift/export/excel`, '_blank');
  }

  downloadCSV(): void {
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const downloadTimestamp = new Date().toLocaleString();
    const email = currentUser.emailaddress || 'Unknown User';
    const headerInfo = `\n\nReport Generated By: ${email}\nDownload Date & Time: ${downloadTimestamp}\n\n`;
  
    let csvData = '';
  
    // Check if there are shifts to include in the report
    if (this.shifts.length) {
      csvData = this.convertToCSV(this.shifts);
    } else {
      // Provide a message if no data is available
      csvData = 'No shifts data available.\n';
    }
  
    // Add header information at the end of the report
    csvData += headerInfo;
  
    const blob = new Blob([csvData], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'staff-shift-report.csv';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  }
  
  convertToCSV(shifts: StaffShifts[]): string {
    const header = ['Staff', 'Shift Type', 'Start Time', 'End Time', 'Notes'];
    const rows = shifts.map(shift => [
      this.getStaffName(shift.staffId),
      this.getShiftTypeName(shift.shift_Type_Id),
      new Date(shift.startTime).toLocaleString(),
      new Date(shift.endTime).toLocaleString(),
      shift.notes
    ]);
  
    return header.join(',') + '\n' + rows.map(row => row.join(',')).join('\n');
  }

  downloadPDF(): void {
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const downloadTimestamp = new Date().toLocaleString();
    const email = currentUser.emailaddress || 'Unknown User';
    const headerInfo = `\n\nReport Generated By: ${email}\nDownload Date & Time: ${downloadTimestamp}\n\n`;
  
    // Create a new jsPDF instance
    const doc = new jsPDF();
    
    // Add title to the PDF
    doc.setFontSize(18);
    doc.text('Staff Shift Report', 14, 22);
  
    // Add a table to the PDF
    const tableData = this.shifts.map(shift => [
      this.getStaffName(shift.staffId) || '',
      this.getShiftTypeName(shift.shift_Type_Id) || '',
      new Date(shift.startTime).toLocaleString(),
      new Date(shift.endTime).toLocaleString(),
      shift.notes || ''
    ]);
  
    autoTable(doc, {
      startY: 30,
      head: [['Staff', 'Shift Type', 'Start Time', 'End Time', 'Notes']],
      body: tableData,
      theme: 'striped',
      styles: { fontSize: 10 },
    });
  
    // Add footer with header info
    doc.setFontSize(10);
    doc.text(headerInfo, 14, doc.internal.pageSize.height - 20);
  
    // Save the PDF
    doc.save('staff-shift-report.pdf');
  }
    exportToJpg(): void {
    const reportElement = document.querySelector('.report-container') as HTMLElement;
    html2canvas(reportElement).then(canvas => {
      const link = document.createElement('a');
      link.download = 'staff-shift-report.jpg';
      link.href = canvas.toDataURL('image/jpeg');
      link.click();
    });
  }
}
