import { Component, OnInit } from '@angular/core';
import { InspectionService, Inspection,InspectionType, InspectionStatus } from '../../../services/inspection.services';
import { StaffService, Staff } from '../../../services/staff.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { Router } from '@angular/router';
import { Room, RoomService } from '../../../services/room.service';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

@Component({
  selector: 'app-inspection-report',
  standalone: true,
  imports: [CommonModule, FormsModule, HttpClientModule],
  templateUrl: './inspection-report.component.html',
  styleUrl: './inspection-report.component.scss'
})
export class InspectionReportComponent implements OnInit{
  inspections: Inspection[] = [];
  filteredInspections: Inspection[] = [];
  inspectionTypes: InspectionType[] = [];
  inspectionStatuses:InspectionStatus[]=[];
  staffMembers: Staff[] = [];
  rooms:Room[]=[];
  //groupedInspections: { [staffId: number]: Inspection[] } = {};
  groupedByStaff: { [staffId: number]: Inspection[] } = {};
  groupedByRoom: { [roomId: number]: Inspection[] } = {};
  totalInspections: number = 0;
  expectedTotalInspections: number = 0; // Calculated dynamically
  expectedTotalStaffInspections:number=6;
  expectedTotalRoomInspections:number=6;
  staffCheckbox: boolean = false;
  roomCheckbox:boolean=false;
  selectedMonth: number = new Date().getMonth();
  emailaddress!: string;
  currentMonthName: string = new Date().toLocaleString('default', { month: 'long' });

  months = [
    { value: 0, name: 'January' },
    { value: 1, name: 'February' },
    { value: 2, name: 'March' },
    { value: 3, name: 'April' },
    { value: 4, name: 'May' },
    { value: 5, name: 'June' },
    { value: 6, name: 'July' },
    { value: 7, name: 'August' },
    { value: 8, name: 'September' },
    { value: 9, name: 'October' },
    { value: 10, name: 'November' },
    { value: 11, name: 'December' }
  ];

  constructor(
    private inspectionService: InspectionService,
    private staffService: StaffService,
    private router:Router, private roomService:RoomService
  ) {}

  ngOnInit(): void {
    this.loadData();
  }

  loadData(): void {
    this.inspectionService.getInspections().subscribe((data: Inspection[]) => {
      this.inspections = data;
      this.totalInspections = this.inspections.length;
      this.groupInspections();
    });

    this.inspectionService.getInspectionTypes().subscribe((data: InspectionType[]) => {
      this.inspectionTypes = data;
    });
    this.inspectionService.getInspectionStatuses().subscribe((data: InspectionStatus[]) => {
      this.inspectionStatuses = data;
    });

    this.staffService.getStaff().subscribe((data: Staff[]) => {
      this.staffMembers = data;
    });

    this.roomService.getRooms().subscribe((data: Room[]) => {
      this.rooms = data;
      this.calculateExpectedTotalInspections();
    });
  }

   // Method to download the report as PDF
   downloadPDF(): void {
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const downloadTimestamp = new Date().toLocaleString();
    const email = currentUser.emailaddress || 'Unknown User';
    
    const doc = new jsPDF();

    // Add title and other information
    doc.text('Inspection Control Break Report', 10, 10);
    doc.text(`Report Generated By: ${email}`, 10, 20);
    doc.text(`Download Date & Time: ${downloadTimestamp}`, 10, 30);

    const reportElement = document.getElementById('report-content');
    if (reportElement) {
      html2canvas(reportElement).then((canvas) => {
        const imgData = canvas.toDataURL('image/png');
        const imgWidth = 190; // Adjust as needed
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        doc.addImage(imgData, 'PNG', 10, 40, imgWidth, imgHeight);
        doc.save('inspection-report.pdf');
      });
    }
  }
  goBack() {
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const role = currentUser.role;
    const emailaddress = currentUser.emailaddress;
  
    if (role === 'Admin') {
      this.router.navigate([`/admin-dashboard/${emailaddress}`]);
    } else if (role === 'Staff') {
      this.router.navigate([`/staff-dashboard/${emailaddress}`]);
    } else if (role === 'Guest') {
      this.router.navigate([`/guest-dashboard/${emailaddress}`]);
    } else {
      console.error('Unknown role:', role);
      this.router.navigate(['/']); // Default route or error page
    }
  }

  getRoomName(roomId: number): string {
    const room = this.rooms.find(r => r.room_ID === roomId);
    return room ? room.name : 'Unknown';
  }
  
  getStaffName(staffId: number): string {
    const staff = this.staffMembers.find(s => s.staffId === staffId);
    return staff ? staff.name : 'Unknown';
  }

  getInspectionStatusName(inspection_Status_ID: number): string {
    const inspectionStatus = this.inspectionStatuses.find(iS => iS.inspection_Status_ID === inspection_Status_ID);
    return inspectionStatus ? inspectionStatus.name : 'Unknown';
  }

  
  calculateExpectedTotalInspections(): void {
    this.expectedTotalInspections = this.rooms.length * 6; // Adjust multiplier as needed
  }
  // calculateExpectedTotalStaffInspections(): void {
  //   this.expectedTotalStaffInspections = 6; // Adjust multiplier as needed
  // }
  // calculateExpectedTotalRoomInspections(): void {
  //   this.expectedTotalInspections = 6; // Adjust multiplier as needed
  // }
  filterByMonth(): void {
    this.filteredInspections = this.inspections.filter(inspection =>
      new Date(inspection.dateCreated).getMonth() === this.selectedMonth
    );
    this.totalInspections = this.filteredInspections.length;
    this.groupInspections();
  }

  groupBy(data: Inspection[], key: string): { [key: number]: Inspection[] } {
    return data.reduce((acc, inspection) => {
      const id = inspection[key];
      if (!acc[id]) {
        acc[id] = [];
      }
      acc[id].push(inspection);
      return acc;
    }, {} as { [key: number]: Inspection[] });
  }
  groupInspections(): void {
    if (this.staffCheckbox) {
      this.groupedByStaff = this.inspections.reduce((acc, inspection) => {
        const staffId = inspection.staffId;
        if (!acc[staffId]) {
          acc[staffId] = [];
        }
        acc[staffId].push(inspection);
        return acc;
      }, {} as { [staffId: number]: Inspection[] });
    }

    if (this.roomCheckbox) {
      this.groupedByRoom = this.inspections.reduce((acc, inspection) => {
        const roomId = inspection.room_ID;
        if (!acc[roomId]) {
          acc[roomId] = [];
        }
        acc[roomId].push(inspection);
        return acc;
      }, {} as { [roomId: number]: Inspection[] });
    }
  }
  toggleGrouping(): void {
    this.groupInspections();
    this.filterByMonth();
  }

  // toggleStaffGrouping(): void {
  //   this.staffCheckbox = !this.staffCheckbox;
  //   this.groupInspections();
  // }

  getInspectionTypeName(typeId: number): string {
    const type = this.inspectionTypes.find(t => t.inspection_Type_ID === typeId);
    return type ? type.name : 'Unknown';
  }

  getRoomInspectionsCount(roomId: number): number {
    const inspectionsForRoom = this.groupedByRoom[roomId] || [];
    const currentMonth = new Date().getMonth();
    return inspectionsForRoom.filter(inspection => new Date(inspection.dateCreated).getMonth() === currentMonth).length;
  }

  getStaffInspectionsCount(staffId: number): number {
    const inspectionsForStaff = this.groupedByStaff[staffId] || [];
    return inspectionsForStaff.length;
  }

  downloadCSV(): void {
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const downloadTimestamp = new Date().toLocaleString();
    const email = currentUser.emailaddress || 'Unknown User';
    const headerInfo = `\n\nReport Generated By: ${email}\nDownload Date & Time: ${downloadTimestamp}\n\n`;

    let csvData = '';

    if (this.staffCheckbox) {
        for (let staffId in this.groupedByStaff) {
            const staff = this.staffMembers.find(s => s.staffId.toString() === staffId);
            if (staff) {
                csvData += `\nStaff: ${staff.name}\n`;
                csvData += this.convertToCSV(this.groupedByStaff[staffId]);
            }
        }
    }

    if (this.roomCheckbox) {
        for (let roomId in this.groupedByRoom) {
            const room = this.rooms.find(r => r.room_ID.toString() === roomId);
            if (room) {
                csvData += `\nRoom: ${room.name}\n`;
                csvData += this.convertToCSV(this.groupedByRoom[roomId]);
            }
        }
    }

    // General Report Case or when no checkbox is selected
    if (!this.staffCheckbox && !this.roomCheckbox) {
        csvData = this.convertToCSV(this.inspections);
    }

    // Add header information at the end of the report
    csvData += headerInfo;

    const blob = new Blob([csvData], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'inspection-report.csv';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
}

convertToCSV(inspections: Inspection[]): string {
    const header = ['Status', 'Type', 'Staff', 'Room', 'Description', 'Date Created', 'Date Modified'];
    const rows = inspections.map(inspection => [
        inspection.inspection_Status_ID,
        this.getInspectionTypeName(inspection.inspection_Type_ID),
        this.getStaffName(inspection.staffId),
        this.getRoomName(inspection.room_ID),
        inspection.description,
        new Date(inspection.dateCreated).toLocaleString(),
        new Date(inspection.dateModified).toLocaleString()
    ]);

    return header.join(',') + '\n' + rows.map(row => row.join(',')).join('\n');
}
}
