import { Component, OnInit, ElementRef,ViewChild } from '@angular/core';
import { StaffService, User } from '../../../services/staff.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { Router } from '@angular/router';
import * as jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { GuestInService, GuestService } from '../../../services/guest.service';

@Component({
  selector: 'app-generate-guest-report',
  standalone: true,
  imports: [CommonModule, FormsModule, HttpClientModule],
  templateUrl: './generate-guest-report.component.html',
  styleUrl: './generate-guest-report.component.scss'
})
export class GenerateGuestReportComponent implements OnInit{
  guests: GuestInService[] = [];
  filteredGuests: GuestInService[] = [];
  users: User[] = [];

  @ViewChild('reportTable', { static: false }) reportTable!: ElementRef;

  constructor(private guestService: GuestService, private router: Router, private staffService:StaffService) {}

  ngOnInit(): void {
    this.guestService.getAllGuests().subscribe((guests) => {
      this.guests = guests;
      this.filteredGuests = guests;
    });
    this.staffService.getUsers().subscribe((users) => {
      this.users = users;
    });
  }

  onSearch(event: Event): void {
    const searchTerm = (event.target as HTMLInputElement).value.toLowerCase();
    this.filteredGuests = this.guests.filter(guest =>
      guest.name?.toLowerCase().includes(searchTerm) ||
      guest.guest_Surname.toLowerCase().includes(searchTerm) ||
      guest.description?.toLowerCase().includes(searchTerm)
    );
  }

  getUserName(userId: string): string {
    const user = this.users.find(u => u.id === userId);
    return user ? user.userName : 'Unknown';
  }

  goBack() {
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const role = currentUser.role;
    const emailaddress = currentUser.emailaddress;
  
    if (role === 'Admin') {
      this.router.navigate([`/admin-dashboard/${emailaddress}`]);
    } else if (role === 'Staff') {
      this.router.navigate([`/staff-dashboard/${emailaddress}`]);
    } else if (role === 'Guest') {
      this.router.navigate([`/guest-dashboard/${emailaddress}`]);
    } else {
      console.error('Unknown role:', role);
      this.router.navigate(['/']); // Default route or error page
    }
  }

  downloadCSV(): void {
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const downloadTimestamp = new Date().toLocaleString();
    const email = currentUser.emailaddress || 'Unknown User';
    const headerInfo = `\n\nReport Generated By: ${email}\nDownload Date & Time: ${downloadTimestamp}\n`;
    
    const csvData = this.convertToCSV(this.filteredGuests) + headerInfo;
    const blob = new Blob([csvData], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'guest-report.csv';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  }
  
  convertToCSV(guests: GuestInService[]): string {
    const header = ['Guest Name', 'Description', 'Guest Surname', 'Guest Email', 'Guest Phone Number', 'Date Of Birth', 'Username'];
    const rows = guests.map(guest => [
      guest.name,
      guest.description,
      guest.guest_Surname,
      guest.guest_Email,
      guest.guest_PhoneNo,
      guest.dob.toString(),
      guest.userId?.toString(),
    ]);
  
    const csvContent = [header, ...rows].map(e => e.join(",")).join("\n");
    return csvContent;
  }
  
  downloadPDF(): void {
    const element = this.reportTable.nativeElement;
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const email = currentUser.emailaddress || 'Unknown User';
    const downloadTimestamp = new Date().toLocaleString();

    html2canvas(element).then(canvas => {
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF.default('p', 'mm', 'a4');
      const imgProps = pdf.getImageProperties(imgData);
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

      pdf.addImage(imgData, 'PNG', 0, 10, pdfWidth, pdfHeight);

      // Add the footer text
      pdf.setFontSize(10);
      pdf.text(`Report Generated By: ${email}`, 10, pdfHeight + 20);
      pdf.text(`Date & Time: ${downloadTimestamp}`, 10, pdfHeight + 30);

      pdf.save('guest-report.pdf');
    });
  }
}
