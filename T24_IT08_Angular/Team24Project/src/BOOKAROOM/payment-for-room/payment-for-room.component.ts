import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { RoomPaymentService } from '../../services/room-payment.service';
import { BookingService, Booking } from '../../services/booking.service';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { MaterialModule } from '../../shared/components/material.module';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-payment-for-room',
  standalone: true,
  imports: [MaterialModule, CommonModule],
  templateUrl: './payment-for-room.component.html',
  styleUrl: './payment-for-room.component.scss'
})
export class PaymentForRoomComponent implements OnInit {
  amount: number = 0;
  bookingID: number = 0; // Store the Booking ID
  @ViewChild('paymentRef', { static: true }) paymentRef!: ElementRef;

  constructor(
    private router: Router,
    private paymentService: RoomPaymentService,
    private route: ActivatedRoute,
    private bookingService: BookingService,
    private http: HttpClient
  ) {}

  ngOnInit(): void {
    // Capture the payment amount and booking ID from the route parameters
    this.route.params.subscribe((params) => {
      this.amount = +params['amount'];
      this.bookingID = +params['bookingID']; // Get BookingID from route params
      console.log('Captured bookingID:', this.bookingID);
    });

    this.initializePayPalButtons();
  }

  cancel(): void {
    this.router.navigate(['/room-booking-page']);
  }

  // Initialize PayPal Buttons
  initializePayPalButtons(): void {
    window.paypal
      .Buttons({
        style: {
          layout: 'horizontal',
          color: 'blue',
          shape: 'rect',
          label: 'paypal',
        },
        createOrder: (data: any, actions: any) => {
          return actions.order.create({
            purchase_units: [
              {
                amount: {
                  value: this.amount.toString(),
                  currency_code: 'USD',
                },
              },
            ],
          });
        },
        onApprove: (data: any, actions: any) => {
          return actions.order.capture().then((details: any) => {
            if (details.status === 'COMPLETED') {
              this.paymentService.transactionID = details.id;
              const saleId = details.purchase_units[0].payments.captures[0].id;
              console.log('Captured sale_id:', saleId);
              this.handlePaymentSuccess(details, saleId);
            }
          });
        },
        onError: (error: any) => {
          console.error('Payment error:', error);
        },
      })
      .render(this.paymentRef.nativeElement);
  }

  // Handle payment success and save payment details
  handlePaymentSuccess(details: any, saleId: string): void {
    const paymentMethod = details.payer.payment_method || 'PayPal';

    this.savePayment(details, saleId, paymentMethod).subscribe(
      () => {
        // Store payment details in RoomPaymentService
        this.paymentService.totalAmount = this.amount;
        this.paymentService.transactionID = details.id;
        this.paymentService.paymentDate = new Date().toISOString();
        this.paymentService.paymentStatus = details.status;
        this.paymentService.paymentMethod = paymentMethod;
        this.paymentService.saleId = saleId;

        // Update booking status to 'Paid'
        this.updateBookingStatusToPaid().subscribe(
          () => {
            this.router.navigate(['/confirm']);
          },
          (error: any) => {
            console.error('Error updating booking status to Paid', error);
          }
        );
      },
      (error: any) => {
        console.error('Error saving payment:', error);
        alert('Failed to save payment details.');
      }
    );
  }

  // Save payment details to the backend
  savePayment(details: any, saleId: string, paymentMethod: string): Observable<any> {
    return this.bookingService.getBookingById(this.bookingID).pipe(
      map(booking => {
        // Construct the payment payload
        const payment = {
          paymentID: 0, // Assuming the paymentID is generated by the backend
          amountPaid: this.amount,
          transactionID: details.id,
          paymentDate: new Date().toISOString(),
          bookingID: this.bookingID,
         bookingReference:'', // Use guestID from the booking
          guestName: booking.name || 'Unknown Guest',
          paymentStatus: details.status,
          paymentMethod: paymentMethod,
          refundID: null, // Set to null unless you have a refund logic
          saleId: saleId,
        };
        console.log('Payment payload:', payment);
        return payment;
      }),
      switchMap(payment => this.http.post('https://localhost:7102/api/Payments', payment))
    );
  }

  // Update booking status to 'Paid'
  updateBookingStatusToPaid(): Observable<void> {
    return this.bookingService.updateBookingStatusToPaid(this.bookingID);
  }
}