import { Component, OnInit } from '@angular/core';
import { LostAndFoundService, LostAndFoundItems,LostAndFoundStatuses } from '../../../services/LostAndFound.service';
import { StaffService,Staff } from '../../../services/staff.service';
import { BookingService, Booking } from '../../../services/booking.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

@Component({
  selector: 'app-lost-and-found-report',
  standalone: true,
  imports: [CommonModule,FormsModule,HttpClientModule],
  templateUrl: './lost-and-found-report.component.html',
  styleUrl: './lost-and-found-report.component.scss'
})
export class LostAndFoundReportComponent implements OnInit{
  lostAndFoundItems: LostAndFoundItems[] = [];
  statuses: LostAndFoundStatuses[] = [];
  staffMembers: Staff[] = []; // Replace with your actual staff model
  bookings: Booking[] = []; // Replace with your actual bookings model
  currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
  downloadTimestamp = new Date().toLocaleString();

  selectedStatus?: number;
  selectedStaff?: number;
  selectedBooking?: number;

  constructor(private lostAndFoundService: LostAndFoundService,private staffService:StaffService, private bookingService:BookingService) {}

  ngOnInit(): void {
    // Fetch all the initial data
    this.loadStatuses();
    this.loadStaffMembers(); // Implement this method to get staff members
    this.loadBookings(); // Implement this method to get bookings
    this.loadLostAndFoundItems();
  }

  loadStatuses() {
    this.lostAndFoundService.getLostAndFoundStatuses().subscribe((data) => {
      this.statuses = data;
    });
  }

  loadStaffMembers() {
    // Implement the logic to load staff members here
    this.staffService.getStaff().subscribe((data)=>{
      this.staffMembers=data;
    })
  }

  loadBookings() {
    // Implement the logic to load bookings here
    this.bookingService.getBookings().subscribe((data)=>{
      this.bookings=data;
    })
  }

  loadLostAndFoundItems() {
    this.lostAndFoundService.getLostAndFoundItems().subscribe((data) => {
      this.lostAndFoundItems = data;
    });
  }

  getStatusName(statusId?: number): string {
    if (statusId === undefined) return 'Unknown'; // Handle undefined case
    const status = this.statuses.find(s => s.l_And_F_Status_ID === statusId);
    return status ? status.name : 'Unknown';
  }
  
  getStaffName(staffId?: number): string {
    if (staffId === undefined) return 'Unknown'; // Handle undefined case
    const staff = this.staffMembers.find(s => s.staffId === staffId);
    return staff ? staff.name : 'Unknown';
  }
  
  getBookingName(bookingId?: number): string {
    if (bookingId === undefined) return 'Unknown'; // Handle undefined case
    const booking = this.bookings.find(b => b.bookingID === bookingId);
    return booking ? booking.bookingReference : 'Unknown';
  }

  onFilterChange() {
    this.lostAndFoundService
      .getLostAndFoundByCriteria(this.selectedStatus, this.selectedStaff, this.selectedBooking)
      .subscribe((data) => {
        this.lostAndFoundItems = data;
      });
  }

  downloadPDF(): void {
    const doc = new jsPDF();

    const content = document.getElementById('report-content');
    if (content) {
      html2canvas(content).then((canvas) => {
        const imgData = canvas.toDataURL('image/png');
        const imgWidth = 180; // adjust as needed
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        doc.addImage(imgData, 'PNG', 10, 40, imgWidth, imgHeight);
        doc.save('lost-and-found-report.pdf');
      });
    }
    doc.text('Lost and Found Report', 10, 10);
    doc.text(`Report Generated By: ${this.currentUser.Email || 'Unknown User'}`, 10, 20);
    doc.text(`Download Date & Time: ${this.downloadTimestamp}`, 10, 30);
  }
}
