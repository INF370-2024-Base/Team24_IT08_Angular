import { Component } from '@angular/core';
import { BookingService, RoomRefund, RefundReason, RefundStatus } from '../../services/booking.service';
import { Router, RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { MaterialModule } from '../../shared/components/material.module';
import { FormsModule } from '@angular/forms';


@Component({
  selector: 'app-booking-refund',
  standalone: true,
  imports: [CommonModule, MaterialModule, RouterModule, FormsModule],
  templateUrl: './booking-refund.component.html',
  styleUrl: './booking-refund.component.scss'
})
export class BookingRefundComponent {
  transactionID: string = '';
  refundReason: RefundReason = RefundReason.Cancellation; // Default to an enum value
  successMessage: string = '';
  errorMessage: string = '';
  refundAmount: number = 0;

  refundReasons = Object.values(RefundReason); // Array of refund reasons for a dropdown

  constructor(private bookingService: BookingService, private router: Router) {}

  submitRefundRequest() {
    if (!this.transactionID || !this.refundReason) {
      this.errorMessage = 'Please provide both a valid Transaction ID and a reason for the refund.';
      return;
    }

    // Create the refund data to send to the backend
    const refundData: RoomRefund = {
      refundID: 0, // Set to 0, will be generated by the backend
      amountRefunded: this.refundAmount,
      refundDate: new Date().toISOString(),
      reason: this.refundReason, // Ensure this is a valid enum value
      bookingID: 123, // Retrieve this dynamically based on booking ID or transaction ID
      status: RefundStatus.Pending
    };

    this.bookingService.addRefund(refundData).subscribe(
      (response) => {
        this.successMessage = 'Refund request submitted successfully.';
        this.router.navigate(['/confirmation']); // Navigate to a confirmation page if needed
      },
      (error) => {
        this.errorMessage = 'An error occurred while submitting the refund request.';
        console.error('Refund request error:', error);
      }
    );
  }
}
